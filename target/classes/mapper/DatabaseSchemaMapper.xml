<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.smoothsql.mapper.DatabaseSchemaMapper">

    <resultMap id="DatabaseSchemaResultMap" type="com.smoothsql.entity.DatabaseSchema">
        <id property="id" column="id"/>
        <result property="databaseName" column="database_name"/>
        <result property="tableName" column="table_name"/>
        <result property="columnName" column="column_name"/>
        <result property="columnType" column="column_type"/>
        <result property="isNullable" column="is_nullable"/>
        <result property="columnComment" column="column_comment"/>
    </resultMap>

    <insert id="insert" parameterType="com.smoothsql.entity.DatabaseSchema" 
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO database_schema (
            database_name, table_name, column_name, column_type, 
            is_nullable, column_comment
        ) VALUES (
            #{databaseName}, #{tableName}, #{columnName}, #{columnType},
            #{isNullable}, #{columnComment}
        )
    </insert>

    <insert id="batchInsert">
        INSERT INTO database_schema (
            database_name, table_name, column_name, column_type, 
            is_nullable, column_comment
        ) VALUES
        <foreach collection="schemas" item="schema" separator=",">
            (#{schema.databaseName}, #{schema.tableName}, #{schema.columnName}, 
             #{schema.columnType}, #{schema.isNullable}, #{schema.columnComment})
        </foreach>
    </insert>

    <select id="selectByDatabaseName" parameterType="string" resultMap="DatabaseSchemaResultMap">
        SELECT * FROM database_schema 
        WHERE database_name = #{databaseName}
        ORDER BY table_name, column_name
    </select>

    <select id="selectByTableName" resultMap="DatabaseSchemaResultMap">
        SELECT * FROM database_schema 
        WHERE database_name = #{databaseName} AND table_name = #{tableName}
        ORDER BY column_name
    </select>

    <select id="selectTableNames" parameterType="string" resultType="string">
        SELECT DISTINCT table_name 
        FROM database_schema 
        WHERE database_name = #{databaseName}
        ORDER BY table_name
    </select>

    <select id="selectColumnNames" resultType="string">
        SELECT column_name 
        FROM database_schema 
        WHERE database_name = #{databaseName} AND table_name = #{tableName}
        ORDER BY column_name
    </select>

    <delete id="deleteByDatabaseName" parameterType="string">
        DELETE FROM database_schema WHERE database_name = #{databaseName}
    </delete>

</mapper>